using System.Collections.Generic;
using System.Linq;

using JetBrains.Annotations;

namespace Reaganism.CDC.Diffing;

/// <summary>
///     Settings for file diffing.
/// </summary>
[PublicAPI]
public sealed class DifferSettings(string originalDirectory, string modifiedDirectory, string patchesDirectory)
{
    /// <summary>
    ///     The name of the file containing a list of paths of removed files.
    /// </summary>
    /// <remarks>
    ///     This file should be located in the root of the "patches" directory.
    /// </remarks>
    [PublicAPI]
    public const string REMOVED_FILES_LIST_NAME = "removed_files.list";

    /// <summary>
    ///     The path to the original, unmodified files.
    /// </summary>
    [PublicAPI]
    public string OriginalDirectory { get; } = originalDirectory;

    /// <summary>
    ///     The path to the new, modified files.
    /// </summary>
    [PublicAPI]
    public string ModifiedDirectory { get; } = modifiedDirectory;

    /// <summary>
    ///     The path to the directory that contains diffed patches generated by
    ///     comparing the modified directory to the original directory.
    /// </summary>
    [PublicAPI]
    public string PatchesDirectory { get; } = patchesDirectory;

    private readonly List<IFileDiffTypeProvider> canDiffFileProviders = [];

    /// <summary>
    ///     Determines whether the file at the given path is diffable and how it
    ///     should be diffed.
    /// </summary>
    /// <param name="filePath">The path of the file.</param>
    /// <param name="diffType">
    ///     The diff type, which may have not yet been determined.
    /// </param>
    /// <param name="ignore">Whether this file should be ignored.</param>
    [PublicAPI]
    public void GetFileDiffType(string filePath, out FileDiffType diffType, out bool ignore)
    {
        var refDiffType = default(FileDiffType?);
        var refIgnore   = default(bool?);

        foreach (var provider in canDiffFileProviders)
        {
            provider.GetFileDiffType(filePath, ref refDiffType, ref refIgnore);
        }

        diffType = refDiffType ?? FileDiffType.TextualDiff;
        ignore   = refIgnore   ?? false;
    }

    /// <summary>
    ///     Adds a provider to the list of providers that determine whether a
    ///     file is diffable.
    /// </summary>
    /// <param name="provider">The provider.</param>
    [PublicAPI]
    public void AddCanDiffFileProvider(IFileDiffTypeProvider provider)
    {
        canDiffFileProviders.Add(provider);
    }
}